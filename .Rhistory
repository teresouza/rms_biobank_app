meta <- read.delim("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/metadata/wgs_comparison_germ2.txt", header = T, sep = "\t")
meta.rseq <- read.delim("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/metadata/metadata_rseq_rms_final.txt", header = T, sep = "\t")
basedir <- "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/PMCLAB-2018-009/"
files.dir <- "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/files_analysis/"
seg.path <- paste0(basedir, "/seg/")
vcf.path <- paste0(basedir, "/wgs_comp_vcf_filtered/")
fusion.path <- paste0(basedir, "/star_fusion/")
outdir <- paste0(basedir, "/results_genome/")
##Read annotation files
##Add bed annotation file for CNAs
refseq.sorted <- readRDS(paste0(files.dir, "refseq.sorted.RDS"))
clinvar <- readRDS(paste0(files.dir, "clinvar.RDS"))
cancer.genes <- readRDS(paste0(files.dir, "cancer.genes.RDS"))
sarcoma.genes <- readRDS(paste0(files.dir, "sarcoma.genes.RDS"))
cosmic <- readRDS(paste0(files.dir, "cmc_v92.RDS"))
cosmic.genes <- readRDS(paste0(files.dir, "cosmic_genes.RDS"))
biomart <- readRDS(paste0(files.dir, "biomart.RDS"))
fusions.bl <- readRDS(paste0(files.dir, "fusions.bl.RDS"))
fusions.wl <- readRDS(paste0(files.dir, "fusions.wl.RDS"))
drivers <- readRDS(paste0(files.dir, "CG_drivers.RDS"))
fusion.analysis <- function(sample, meta.rseq, fusion.path){
message(paste0("....Adding fusion data ", sample))
ids2 <- meta.rseq$id[meta.rseq$id2 == sample]
in.files <- list.files(fusion.path, pattern = "*.star-fusion_predicted.tsv")
fusion.list <- list()
for(id in ids2){
fusion.data <- read.delim(paste0(fusion.path, in.files[grep(id, in.files)]),
skip = grep("FusionName", readLines(paste0(fusion.path, in.files[grep(id, in.files)])))-1, header = T) %>%
dplyr::select(1, 5, 6,  7, 8,10, 20) %>% dplyr::filter(!X.FusionName %in% fusions.bl$fusion[fusions.bl$Relevant == "No"]) %>%
tidyr::separate(LeftBreakpoint, into = c("Leftchr", "Leftposition"), sep = "[:|-]", extra = "drop") %>%
tidyr::separate(RightBreakpoint, into = c("Rightchr", "Rightposition"), sep = "[:|-]", extra = "drop") %>%
add_column(Type = ifelse(.$Leftchr == .$Rightchr, "Close", "Far"), sample = meta.rseq$sample[meta.rseq$id == id]) %>% filter(FFPM >=0.1, Type != "Close") %>%
separate(X.FusionName, into = c("Gene1", "Gene2"), sep = "--", remove = F) %>% dplyr::filter(Leftchr != "chrM" & Rightchr != "chrM") %>%
filter(Gene1 %in% fusions.wl$Gene.name | Gene2 %in% fusions.wl$Gene.name)
if(nrow(fusion.data) >= 1){
fusion.data$source <- meta.rseq$source[meta.rseq$id == id] %>% .[!is.na(.)]
}
fusion.list[[id]] <- fusion.data
}
fusion.df <- ldply(fusion.list, data.frame, .id = "source")
return(fusion.df)
}
fusion <- list()
for(sample in unique(meta.rseq$id2)){
#cnv[[sample]] <- cnv.analysis(sample, meta, outdir, T,T, c("tumor", "tumoroid"), F)
#snv.proc[[sample]] <- snv.processing(sample, meta, vcf.path)
#snv[[sample]] <- snv.analysis(snv.proc[[sample]], c("tumoroid", "tumor"), type = "intersection")
fusion[[sample]] <- fusion.analysis(sample, meta, fusion.path)
#graphs.sample(sample, cnv[[sample]], snv[[sample]], fusion[[sample]])
gc()
}
fusion
ids2 <- meta.rseq$id[meta.rseq$id2 == sample]
in.files <- list.files(fusion.path, pattern = "*.star-fusion_predicted.tsv")
fusion.list <- list()
for(id in ids2){
fusion.data <- read.delim(paste0(fusion.path, in.files[grep(id, in.files)]),
skip = grep("FusionName", readLines(paste0(fusion.path, in.files[grep(id, in.files)])))-1, header = T) %>%
dplyr::select(1, 5, 6,  7, 8,10, 20) %>% dplyr::filter(!X.FusionName %in% fusions.bl$fusion[fusions.bl$Relevant == "No"]) %>%
tidyr::separate(LeftBreakpoint, into = c("Leftchr", "Leftposition"), sep = "[:|-]", extra = "drop") %>%
tidyr::separate(RightBreakpoint, into = c("Rightchr", "Rightposition"), sep = "[:|-]", extra = "drop") %>%
add_column(Type = ifelse(.$Leftchr == .$Rightchr, "Close", "Far"), sample = meta.rseq$sample[meta.rseq$id == id]) %>% filter(FFPM >=0.1, Type != "Close") %>%
separate(X.FusionName, into = c("Gene1", "Gene2"), sep = "--", remove = F) %>% dplyr::filter(Leftchr != "chrM" & Rightchr != "chrM") %>%
filter(Gene1 %in% fusions.wl$Gene.name | Gene2 %in% fusions.wl$Gene.name)
if(nrow(fusion.data) >= 1){
fusion.data$source <- meta.rseq$source[meta.rseq$id == id] %>% .[!is.na(.)]
}
fusion.list[[id]] <- fusion.data
}
fusion.df <- ldply(fusion.list, data.frame, .id = "source")
fusion.df
sample
sample <- "RMS000FLV"
ids2 <- meta.rseq$id[meta.rseq$id2 == sample]
in.files <- list.files(fusion.path, pattern = "*.star-fusion_predicted.tsv")
fusion.list <- list()
for(id in ids2){
fusion.data <- read.delim(paste0(fusion.path, in.files[grep(id, in.files)]),
skip = grep("FusionName", readLines(paste0(fusion.path, in.files[grep(id, in.files)])))-1, header = T) %>%
dplyr::select(1, 5, 6,  7, 8,10, 20) %>% dplyr::filter(!X.FusionName %in% fusions.bl$fusion[fusions.bl$Relevant == "No"]) %>%
tidyr::separate(LeftBreakpoint, into = c("Leftchr", "Leftposition"), sep = "[:|-]", extra = "drop") %>%
tidyr::separate(RightBreakpoint, into = c("Rightchr", "Rightposition"), sep = "[:|-]", extra = "drop") %>%
add_column(Type = ifelse(.$Leftchr == .$Rightchr, "Close", "Far"), sample = meta.rseq$sample[meta.rseq$id == id]) %>% filter(FFPM >=0.1, Type != "Close") %>%
separate(X.FusionName, into = c("Gene1", "Gene2"), sep = "--", remove = F) %>% dplyr::filter(Leftchr != "chrM" & Rightchr != "chrM") %>%
filter(Gene1 %in% fusions.wl$Gene.name | Gene2 %in% fusions.wl$Gene.name)
if(nrow(fusion.data) >= 1){
fusion.data$source <- meta.rseq$source[meta.rseq$id == id] %>% .[!is.na(.)]
}
fusion.list[[id]] <- fusion.data
}
fusion.df <- ldply(fusion.list, data.frame, .id = "source")
fusion.df
fusion.data
meta
fusion <- list()
for(sample in unique(meta.rseq$id2)){
#cnv[[sample]] <- cnv.analysis(sample, meta, outdir, T,T, c("tumor", "tumoroid"), F)
#snv.proc[[sample]] <- snv.processing(sample, meta, vcf.path)
#snv[[sample]] <- snv.analysis(snv.proc[[sample]], c("tumoroid", "tumor"), type = "intersection")
fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
#graphs.sample(sample, cnv[[sample]], snv[[sample]], fusion[[sample]])
gc()
}
fusion
fusion2 <- ldply(fusion, data.frame)
View(fusion2)
ids2 <- meta.rseq$id[meta.rseq$id2 == sample & meta.rseq$passage != "other"]
ids2
fusion.analysis <- function(sample, meta.rseq, fusion.path){
message(paste0("....Adding fusion data ", sample))
ids2 <- meta.rseq$id[meta.rseq$id2 == sample & meta.rseq$passage != "other"]
in.files <- list.files(fusion.path, pattern = "*.star-fusion_predicted.tsv")
fusion.list <- list()
for(id in ids2){
fusion.data <- read.delim(paste0(fusion.path, in.files[grep(id, in.files)]),
skip = grep("FusionName", readLines(paste0(fusion.path, in.files[grep(id, in.files)])))-1, header = T) %>%
dplyr::select(1, 5, 6,  7, 8,10, 20) %>% dplyr::filter(!X.FusionName %in% fusions.bl$fusion[fusions.bl$Relevant == "No"]) %>%
tidyr::separate(LeftBreakpoint, into = c("Leftchr", "Leftposition"), sep = "[:|-]", extra = "drop") %>%
tidyr::separate(RightBreakpoint, into = c("Rightchr", "Rightposition"), sep = "[:|-]", extra = "drop") %>%
add_column(Type = ifelse(.$Leftchr == .$Rightchr, "Close", "Far"), sample = meta.rseq$sample[meta.rseq$id == id]) %>% filter(FFPM >=0.1, Type != "Close") %>%
separate(X.FusionName, into = c("Gene1", "Gene2"), sep = "--", remove = F) %>% dplyr::filter(Leftchr != "chrM" & Rightchr != "chrM") %>%
filter(Gene1 %in% fusions.wl$Gene.name | Gene2 %in% fusions.wl$Gene.name)
if(nrow(fusion.data) >= 1){
fusion.data$source <- meta.rseq$source[meta.rseq$id == id] %>% .[!is.na(.)]
}
fusion.list[[id]] <- fusion.data
}
fusion.df <- ldply(fusion.list, data.frame, .id = "source")
return(fusion.df)
}
for(sample in unique(meta.rseq$id2)){
#cnv[[sample]] <- cnv.analysis(sample, meta, outdir, T,T, c("tumor", "tumoroid"), F)
#snv.proc[[sample]] <- snv.processing(sample, meta, vcf.path)
#snv[[sample]] <- snv.analysis(snv.proc[[sample]], c("tumoroid", "tumor"), type = "intersection")
fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
#graphs.sample(sample, cnv[[sample]], snv[[sample]], fusion[[sample]])
gc()
}
fusion2 <- ldply(fusion, data.frame)
View(fusion2)
fusion3 <- fusion2[,c(15,2,1, 3, 4, 5, 12, 13 )]
View(fusion3)
fusion3 <- fusion2[,c(15,2,1, 3, 4, 5, 12, 13, 7,8,10,11)]
View(fusion3)
colnames(fusion3) <- c("Sample", "Source", "Id", "Fusion", "Gene 1", "Gene 2", "FFPM", "Protein Fusion Type", "Left Chr", "Left Pos", "Right Chr", "Right Pos")
fusion <- saveRDS(fusion3, "/Users/terezinhadesouza/Dropbox/Git/RMS_Biobank_ShinyApp/data/RMS_biobank_fusion_March2021.RDS")
colnames(fusion3) <- c("Sample", "Source", "Id", "Fusion", "Gene 1", "Gene 2", "FFPM", "Protein fusion type", "Left Chr", "Left Pos", "Right Chr", "Right Pos")
saveRDS(fusion3, "/Users/terezinhadesouza/Dropbox/Git/RMS_Biobank_ShinyApp/data/RMS_biobank_fusion_March2021.RDS")
test <- read.delim("./Downloads/CMC_export.v92/cmc_export.tsv", header = T, sep = "\t")
View(test)
test[test$GENOMIC_MUTATION_ID == "COSM4661535",]
test[test$LEGACY_MUTATION_ID == "COSM4661535",]
test[test$LEGACY_MUTATION_ID == "COSM7348374",]
library(tidyverse)
colnames(test)
test2 <- test %>% select(1, 3,4,6,7,8,12, 13,19,21)
View(test2)
test2$pos <- gsub("-.*","",test2$Mutation.genome.position.GRCh38)
View(test2)
colnames(test2) <- c("gene", "onc_tsg", "cgc_tier", "legacy_mutID", "MutCDS", "MutAA", "WTAllele_genomic", "MutAllele_genomic", "MutID", "pos1", "pos2")
View(test2)
saveRDS(test2, "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/files_analysis/cmc_v92_V2.RDS")
test2$coord <- paste0("chr", test2$pos, "_", test2$WTAllele_genomic, "/", test2$MutAllele_genomic)
View(test2)
test2$coord <- paste0("chr", test2$pos2, "_", test2$WTAllele_genomic, "/", test2$MutAllele_genomic)
View(test2)
saveRDS(test2[,-c(10,11)], "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/files_analysis/cmc_v92_V2.RDS")
snvs <- readRDS("/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v0.1/data/RMS_biobank_snvs_March2021.RDS")
View(snvs)
snvs$`Cosmic ID` <- test2$MutID[match(snvs$Change, test2$coord)]
test2[test2$MutID == "COSV100115648",]
snvs$`AA mutation` <- test2$MutAA[match(snvs$Change, test2$coord)]
snvs$oncTSG <- test2$onc_tsg[match(snvs$Change, test2$coord)]
snvs$CGCTier <- test2$cgc_tier[match(snvs$Change, test2$coord)]
colnames(snvs) <- c("Sample", "Sample ID", "Source", "Gene", "Coord", "Genomic change", "AF", "Type mutation", "COSMIC", "AA mutation", "SIFT", "PolyPhen2", "VarAnnot", "Passage", "Oncogene or TSG", "CGC Tier")
View(snvs)
test[test$LEGACY_MUTATION_ID == "COSM3887765",]
test[test$LEGACY_MUTATION_ID == "COSM9073510",]
saveRDS(snvs, "/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v0.1/data/RMS_biobank_snvs_April2021.RDS")
snvs$`Cosmic legacy` <- test2$legacy_mutID[match(snvs$Change, test2$coord)]
snvs$`Cosmic legacy` <- test2$legacy_mutID[match(snvs$Change, test2$coord)]
snvs$Legacy <- test2$legacy_mutID[match(snvs$Change, test2$coord)]
snvs$Legacy <- test2$legacy_mutID[match(snvs$`Genomic change`, test2$coord)]
saveRDS(snvs, "/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v0.1/data/RMS_biobank_snvs_April2021.RDS")
library(shiny)
runApp("/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp/")
colnames(snvs)
levels(test2$onc)
colnames(test2)
levels(test2$onc_tsg)
unique(test2$onc_tsg)
View(abvs)
getwd()
abvs <- readRDS("/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v0.1/data/RMS_biobank_abvs_March2021.RDS")
View(abvs)
abvs <- readRDS("/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v0.1/data/RMS_biobank_abvs_March2021.RDS", check.names = F)
abvs <- abvs %>% add_row(Feature.Abbreviation = "CGC tier", Meaning = "Cancer Gene Census tier described in the COSMIC database (cancer.sanger.ac.uk/census). 'Tier 1' genes have documented activity relevant to canceer; 'Tier 2' consists of genes with strong indications of a role in cancer but with less extensive available evidence and 'Hallmarks' indicates a gene with roles in the hallmarks of cancer.", .before = 3)
saveRDS(abvs, "/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v0.1/data/RMS_biobank_abvs_March2021.RDS")
library(copynumber)
?pcf
meta.rseq <- read.delim("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/metadata/wgs_comparison_germ2.txt",
header = T, sep = "\t", row.names = 1)
meta.rseq
meta.rseq <- read.delim("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/metadata/metadata_rseq_rms_final.txt",
header = T, sep = "\t", row.names = 1)
meta.rseq
R.Version()$version.string
install.packages("shinycssloaders")
library(data.table)
library(DT)
install.packages("knitr")
install.packages("knitr")
library(knitr)
library("knitr")
install.packages("knitr")
library("knitr")
install.packages("xfun")
install_version("xfun", version = "0.22")
install.packages("remotes")
library("remotes")
install_version("xfun", version = "0.22")
install_version("xfun", version = "0.22")
sessionInfo()
install.packages("xfun")
install.packages("xfun")
library("knitr")
sessionInfo()
shinyServer(function(input, output) {
output$report = downloadHandler(
filename = 'myreport.pdf',
content = function(file) {
out = knit2pdf('input.Rnw', clean = TRUE)
file.rename(out, file) # move pdf to file for downloading
},
contentType = 'application/pdf'
)
})
shinyUI(basicPage(
textInput('firstname', 'First name', value = 'Jimmy'),
textInput('lastname', 'Last name', value = 'John'),
downloadButton('report')
))
library(shiny)
shinyServer(function(input, output) {
output$report = downloadHandler(
filename = 'myreport.pdf',
content = function(file) {
out = knit2pdf('input.Rnw', clean = TRUE)
file.rename(out, file) # move pdf to file for downloading
},
contentType = 'application/pdf'
)
})
shinyUI(basicPage(
textInput('firstname', 'First name', value = 'Jimmy'),
textInput('lastname', 'Last name', value = 'John'),
downloadButton('report')
))
shinyServer(function(input, output) {
output$report = downloadHandler(
filename = 'myreport.pdf',
content = function(file) {
out = knit2pdf('input.Rnw', clean = TRUE)
file.rename(out, file) # move pdf to file for downloading
},
contentType = 'application/pdf'
)
})
shinyUI(basicPage(
textInput('firstname', 'First name', value = 'Jimmy'),
textInput('lastname', 'Last name', value = 'John'),
downloadButton('report')
))
library(shiny)
runGist('https://gist.github.com/yihui/6091942')
?isolate
?renderPlot
?dowbloadButton
?downloadButton
?reactivePlot
?reactive
?reactive
?brushedPoints
library(xfun)
install.packages("xfun")
library(xfun)
sessinInfo()
sessionInfo()
###Filtering SNVs for SHiny app
files.snvs <- list.files("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/PMCLAB-2018-009/results_genome/",
pattern = "*_non_syn_mutect2_SNVs_filt.txt")
snv <- list()
for(filenames in files.snvs){
sample <- gsub("_non_syn_mutect2_SNVs_filt.txt", "", filenames)
snv[[sample]] <- read.delim(paste0("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/PMCLAB-2018-009/results_genome/",
filenames), header = T, sep = "\t")
}
snvs.df <- ldply(snv, data.frame)
snvs.df2 <- snvs.df %>% left_join(cosmic, by= c("change" = "coord")) %>%
add_column(sample2 = meta$sample2[match(snvs.df2$sample, meta$id)]) %>%
left_join(metadata, by = c("sample2" = "Sample"))
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/metadata/meta_rms_kidney_PM.csv", header = T, row.names = 1)
basedir <- "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/kidney_PMC/kidney_rms/"
out.genes <- read.delim("/Users/terezinhadesouza/Downloads/out.genes.csv", header = F)
tpm <- function(counts, lengths) {
rate <- counts /(lengths/1000)
rate / sum(rate) * 1e6
}
in.files <- list.files(basedir, pattern = "*.RNA-Seq.gene_id.exon.counts.txt")
rseq <- list()
for(id in unique(meta.rseq$id)){
#fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
# rseq[[sample]] <- rnaseq.analysis(sample, meta.rseq, rseq.path)
all.file <- readLines(paste0(basedir, in.files[grep(id, in.files)]))
rseq[[row.names(meta.rseq)[meta.rseq$id == id]]] <- read.delim(paste0(basedir, in.files[grep(id, in.files)]), skip = grep("GeneID", all.file)-1, header = T) %>%
dplyr::select("GeneID", "GeneName", "Counts", "CPM", "Length") %>% drop_na() %>% add_column("log2CPM" = log((.$CPM)+1, base = 2)) %>%
add_column("TPM" = tpm(.$Counts, .$Length)) %>% add_column("log2TPM" = log(.$TPM+1, base = 2)) %>%
add_column("EnsemblGene" =gsub("\\..*","", .$GeneID)) %>% add_column("sample" = row.names(meta.rseq)[meta.rseq$id == id])
}
library(tidyverse)
library(plyr)
for(id in unique(meta.rseq$id)){
#fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
# rseq[[sample]] <- rnaseq.analysis(sample, meta.rseq, rseq.path)
all.file <- readLines(paste0(basedir, in.files[grep(id, in.files)]))
rseq[[row.names(meta.rseq)[meta.rseq$id == id]]] <- read.delim(paste0(basedir, in.files[grep(id, in.files)]), skip = grep("GeneID", all.file)-1, header = T) %>%
dplyr::select("GeneID", "GeneName", "Counts", "CPM", "Length") %>% drop_na() %>% add_column("log2CPM" = log((.$CPM)+1, base = 2)) %>%
add_column("TPM" = tpm(.$Counts, .$Length)) %>% add_column("log2TPM" = log(.$TPM+1, base = 2)) %>%
add_column("EnsemblGene" =gsub("\\..*","", .$GeneID)) %>% add_column("sample" = row.names(meta.rseq)[meta.rseq$id == id])
}
rseq.df <- ldply(rseq, data.frame, .id = "sample") %>% filter(!GeneName %in% out.genes$V1)
View(rseq.df[rseq.df$GeneName == "EGFR",])
in.files <- list.files(basedir, pattern = "*.RNA-Seq.gene_id.exon.counts.txt")
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/metadata/meta_rms_kidney_PM.csv", header = T, row.names = 1)
basedir <- "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/kidney_PMC/kidney_rms/"
out.genes <- read.delim("/Users/terezinhadesouza/Downloads/out.genes.csv", header = F)
in.files <- list.files(basedir, pattern = "*.RNA-Seq.gene_id.exon.counts.txt")
in.files
meta.rseq
in.files[grep("PMRBM000AIU", in.files)
]
test <-  load("./Downloads/Kmeans.RData")
View(test)
View(camda.all)
saveRDS(camda.all, "camda_12k_genes.RDS")
getwd()
View(mydata)
View(camda.proc)
View(camda.tall)
##Load libraries
packages <- c("bedr", "stringr", "tidyverse", "gplots", "plyr", "magrittr","VariantAnnotation",
"UpSetR", "circlize", "ggsci", "reshape", "gridExtra", "vcfR")
invisible(lapply(packages, require, character.only = TRUE))
vcf.read <- read.vcfR("./Downloads/PMLBM000CLT_PMLBM000CLK_PMCRZ271KNP_WXS.vcf", verbose = F)
vcf.df <- vcfR2tidy(vcf.read)
vcf.df <- vcfR2tidy(vcf.read)
vcf.info <- data.frame(vcf.df[["fix"]]) %>%
add_column(change = paste0(.$CHROM, ":", .$POS, "_", .$REF, "/", .$ALT),
chromkey = paste0(.$ChromKey, ":", .$POS)) %>%
separate(CSQ, into = paste0("col", c(1:20)), sep = "[|]", extra = "drop")
assign("impact", vcf.info[,which(apply(vcf.info, 2, function(x) any(grepl("MODIFIER", x))))])
assign("type", vcf.info[,which(apply(vcf.info, 2, function(x) any(grepl("*_variant", x))))])
assign("SIFT", vcf.info[,which(apply(vcf.info, 2, function(x) any(grepl("tolerated", x))))])
assign("PolyPhen2", vcf.info[,which(apply(vcf.info, 2, function(x) any(grepl("benign", x))))])
assign("VarAnnot", vcf.info[,which(apply(vcf.info, 2, function(x) any(grepl("^COSM*",x))))])
vcf.info <- vcf.info %>% dplyr::select("CHROM", "POS", "REF", "ALT", "col1","col4","col6",
"DP", "change", "chromkey")
vcf.info <- cbind(vcf.info, impact, type, SIFT, PolyPhen2, VarAnnot)
colnames(vcf.info) <- c("chrom", "pos", "ref", "alt", "coord", "ensembl", "gene",
"DP","change", "chromkey", "impact","type",
"SIFT",  "PolyPhen2", "VarAnnot")
vcf.gt <- data.frame(vcf.df[["gt"]]) %>% add_column(chromkey = paste0(.$ChromKey, ":", .$POS)) %>%
dplyr::select(chromkey, Indiv, gt_AD, gt_AF, gt_GT) %>%
add_column(source = ifelse(.$Indiv == id, meta$source[meta$id ==id], "normal")) %>%
separate(gt_AD, into =c("AD_Ref", "AD_Alt"), sep = ",")
vcf.all <- vcf.info %>% full_join(vcf.gt, by = "chromkey") %>%
add_column(sample.name =sample.name, .before = "coord")
vcf.gt <- data.frame(vcf.df[["gt"]]) %>% add_column(chromkey = paste0(.$ChromKey, ":", .$POS)) %>%
dplyr::select(chromkey, Indiv, gt_AD, gt_AF, gt_GT) %>%
separate(gt_AD, into =c("AD_Ref", "AD_Alt"), sep = ",")
vcf.all <- vcf.info %>% full_join(vcf.gt, by = "chromkey") %>%
add_column(sample.name =sample.name, .before = "coord")
vcf.all <- vcf.info %>% full_join(vcf.gt, by = "chromkey"
)
View(vcf.all)
snvs.indels <- vcf.all
non_syn <- snvs.indels[snvs.indels$type %in% c("missense_variant","stop_gained","stop_lost","start_lost","inframe_insertion",
"inframe_deletion", "frameshift_variant"),]
non_syn$SIFT <- str_replace(non_syn$SIFT,  " *\\(.*?\\) *", "")
non_syn <- snvs.indels[snvs.indels$type %in% c("missense_variant","stop_gained","stop_lost","start_lost","inframe_insertion",
"inframe_deletion", "frameshift_variant"),]
genes.AD <- non_syn$gene[non_syn$source == "normal" & non_syn$AD_Alt !=0]
non_syn <- non_syn %>% filter(!gene %in% genes.AD)
View(non_syn)
non_syn <- snvs.indels[snvs.indels$type %in% c("missense_variant","stop_gained","stop_lost","start_lost","inframe_insertion",
"inframe_deletion", "frameshift_variant"),]
non_syn$SIFT <- str_replace(non_syn$SIFT,  " *\\(.*?\\) *", "")
genes.AD <- non_syn$gene[non_syn$source == "normal" & non_syn$AD_Alt !=0]
non_syn <- non_syn %>% filter(!gene %in% genes.AD)
#non_syn$coord <- gsub("c(\"", "", fixed = T, non_syn$coord)
non_syn$PolyPhen2 <- str_replace(non_syn$PolyPhen2,  " *\\(.*?\\) *", "")
write.csv(non_syn, "IFS_WXS.csv")
getwd()
write.csv(non_syn, "./Downloads/IFS_WXS.csv")
vcf.gt <- data.frame(vcf.df[["gt"]]) %>% add_column(chromkey = paste0(.$ChromKey, ":", .$POS)) %>%
dplyr::select(chromkey, Indiv, gt_AD, gt_AF, gt_GT) %>%
add_column(source = ifelse(.$Indiv == "PMLBM000CLT","tumor", "normal")) %>%
separate(gt_AD, into =c("AD_Ref", "AD_Alt"), sep = ",")
cf.all <- vcf.info %>% full_join(vcf.gt, by = "chromkey")
vcf.all <- vcf.info %>% full_join(vcf.gt, by = "chromkey")
snvs.indels <- vcf.all
sample.name <- unique(snvs.indels$sample.name)
non_syn <- snvs.indels[snvs.indels$type %in% c("missense_variant","stop_gained","stop_lost","start_lost","inframe_insertion",
"inframe_deletion", "frameshift_variant"),]
non_syn$SIFT <- str_replace(non_syn$SIFT,  " *\\(.*?\\) *", "")
genes.AD <- non_syn$gene[non_syn$source == "normal" & non_syn$AD_Alt !=0]
non_syn <- non_syn %>% filter(!gene %in% genes.AD)
#non_syn$coord <- gsub("c(\"", "", fixed = T, non_syn$coord)
non_syn$PolyPhen2 <- str_replace(non_syn$PolyPhen2,  " *\\(.*?\\) *", "")
#non_syn$clinvar <- clinvar$INFO[match(non_syn$coord, clinvar$coord)]
non_syn$sarcoma <- ifelse(non_syn$gene %in% cancer.genes$gene, "CG", NA)
write.csv(non_syn, "./Downloads/IFS_WXS.csv")
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/NRSTS_cohort.csv", header = T, row.names = 1)
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/NRSTS_cohort.csv", header = T)
head*meta.rseq
head(meta.rseq)
basedir <- "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/seq_data/"
out.genes <- read.delim("/Users/terezinhadesouza/Downloads/out.genes.csv", header = F)
tpm <- function(counts, lengths) {
rate <- counts /(lengths/1000)
rate / sum(rate) * 1e6
}
in.files <- list.files(basedir, pattern = "*.RNA-Seq.gene_id.exon.counts.txt")
library(tidyverse)
library(plyr)
rseq <- list()
for(id in unique(meta.rseq$id)){
#fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
# rseq[[sample]] <- rnaseq.analysis(sample, meta.rseq, rseq.path)
all.file <- readLines(paste0(basedir, in.files[grep(id, in.files)]))
rseq[[row.names(meta.rseq)[meta.rseq$id == id]]] <- read.delim(paste0(basedir, in.files[grep(id, in.files)]), skip = grep("GeneID", all.file)-1, header = T) %>%
dplyr::select("GeneID", "GeneName", "Counts", "CPM", "Length") %>% drop_na() %>% add_column("log2CPM" = log((.$CPM)+1, base = 2)) %>%
add_column("TPM" = tpm(.$Counts, .$Length)) %>% add_column("log2TPM" = log(.$TPM+1, base = 2)) %>%
add_column("EnsemblGene" =gsub("\\..*","", .$GeneID)) %>% add_column("sample" = row.names(meta.rseq)[meta.rseq$id == id])
}
for(id in unique(meta.rseq$RNA)){
#fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
# rseq[[sample]] <- rnaseq.analysis(sample, meta.rseq, rseq.path)
all.file <- readLines(paste0(basedir, in.files[grep(id, in.files)]))
rseq[[row.names(meta.rseq)[meta.rseq$id == id]]] <- read.delim(paste0(basedir, in.files[grep(id, in.files)]), skip = grep("GeneID", all.file)-1, header = T) %>%
dplyr::select("GeneID", "GeneName", "Counts", "CPM", "Length") %>% drop_na() %>% add_column("log2CPM" = log((.$CPM)+1, base = 2)) %>%
add_column("TPM" = tpm(.$Counts, .$Length)) %>% add_column("log2TPM" = log(.$TPM+1, base = 2)) %>%
add_column("EnsemblGene" =gsub("\\..*","", .$GeneID)) %>% add_column("sample" = row.names(meta.rseq)[meta.rseq$id == id])
}
#fusion[[sample]] <- fusion.analysis(sample, meta.rseq, fusion.path)
# rseq[[sample]] <- rnaseq.analysis(sample, meta.rseq, rseq.path)
all.file <- readLines(paste0(basedir, in.files[grep(id, in.files)]))
all.file
head(all.file)
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/NRSTS_cohort.csv", header = T, row.names = 2)
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/NRSTS_cohort.csv", header = T, row.names = 2)
meta.rseq
rm(list=ls())
meta.rseq <- read.csv("/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/NRSTS_cohort.csv", header = T, row.names = 2)
basedir <- "/Users/terezinhadesouza/surfdrive/PrinsesMaxima/Sarcoma/NRSTSSeq/seq_data/"
out.genes <- read.delim("/Users/terezinhadesouza/Downloads/out.genes.csv", header = F)
workdir <- "./surfdrive/PrinsesMaxima/Sarcoma/bulk_deconvolution/DWLS/"
test <- load("/Users/terezinhadesouza/Downloads/dataBulk.RData")
View(test)
load("/Users/terezinhadesouza/Downloads/dataBulk.RData")
View(dataBulk)
load("/Users/terezinhadesouza/Downloads/dataSC.RData")
View(dataSC)
View(dataSC)
load("/Users/terezinhadesouza/Downloads/labels.RData")
load("/Users/terezinhadesouza/Downloads/labels.RData")
View(labels)
View(labels)
class(dataSC)
class(labels)
class(dataBulk)
setwd("./surfdrive/Git")
library(shiny)
list.files()
runApp("RMS_Biobank_ShinyApp_v1_1")
View(cna)
runApp("RMS_Biobank_ShinyApp_v1_1")
getwd()
library(shiny)
runApp("./app.R")
getwd()
rsconnect::setAccountInfo(name='rmsdatabiobank',
token='1904B0290CDF573B56052F4B4A808CBF',
secret='<SECRET>')
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='rmsdatabiobank',
token='1904B0290CDF573B56052F4B4A808CBF',
secret='<SECRET>')
Error: HTTP 401
GET https://api.shinyapps.io/v1/users/current/
bad signature
rsconnect::setAccountInfo(name='rmsdatabiobank',
token='1904B0290CDF573B56052F4B4A808CBF',
secret='vv8wiSJX8SbQUWULKIRBj/fkBMD2BlLJF2+PRWVs')
rsconnect::deployApp(.)
rsconnect::deployApp(".")
library(shiny)
getwd()
setwd("/Users/terezinhadesouza/surfdrive/Git/RMS_Biobank_ShinyApp_v1_3")
runApp(".")
head(cna)
